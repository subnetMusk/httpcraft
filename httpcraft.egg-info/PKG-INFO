Metadata-Version: 2.4
Name: httpcraft
Version: 0.1.0
Summary: A minimal Python tool for crafting and inspecting HTTP requests
Home-page: https://github.com/subnetMusk/httpcraft
Author: subnetMusk
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: requests
Requires-Dist: beautifulsoup4
Provides-Extra: dev
Requires-Dist: flask; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# HttpCraft

**HttpCraft** is a minimal, extensible Python library for crafting, sending and debugging HTTP requests with JSON or form payloads. It offers precise control over headers, cookies, CSRF tokens, and logging of request/response history.

It is built on top of the excellent [requests](https://docs.python-requests.org/en/latest/) library, providing a structured and developer-friendly layer for advanced HTTP usage.

---

## 📦 Installation

Install from GitHub:

```bash
pip install git+https://github.com/subnetMusk/httpcraft.git
```

For development and testing:

```bash
pip install -r requirements-dev.txt
```

---

## 🛠 Requirements

- Python 3.7+
- [requests](https://pypi.org/project/requests/)
- [beautifulsoup4](https://pypi.org/project/beautifulsoup4/)

---
---

## 🧠 Core Data Types

### `HttpCraftRequest`
Metadata about the request sent:
```python
HttpCraftRequest(
    url: str,
    port: int,
    path: str,
    method: str,
    headers: dict,
    cookies: dict,
    payload: dict,
    payload_type: str  # either "json" or "form"
)
```

### `HttpCraftResponse`
Metadata about the HTTP response:
```python
HttpCraftResponse(
    status_code: int,
    elapsed_time: float,
    response_type: str,  # "json", "html", "text", "unknown"
    response_body: str | dict,
    raw_headers: dict
)
```

### `HttpCraftExchange`
Represents a complete request-response exchange:
```python
HttpCraftExchange(
    timestamp: str,
    request: HttpCraftRequest,
    response: HttpCraftResponse,
    csrf_token_updated: bool
)
```

---

## 🔧 API Overview

### 🎯 Target configuration
```python
HttpCraft(base_url: str)
set_target(url: str)
get_target() -> str
set_port(port: int)
get_port() -> int
reset_target()
```

---

### 🧾 Payload management
```python
set_payload(payload: dict, mode: str = "json")
get_payload() -> dict
get_payload_mode() -> str
set_payload_entry(key: str, value: any)
get_payload_entry(key: str) -> any
remove_payload_entry(key: str)
append_payload(data: dict)
clear_payload()
```

---

### 🧠 Header handling
```python
set_headers(headers: dict)
get_headers() -> dict
set_header_entry(key: str, value: str)
get_header_entry(key: str) -> str
remove_header_entry(key: str)
append_headers(new_data: dict)
clear_headers()
```

---

### 🍪 Cookie handling
```python
set_cookies(cookies: dict)
get_cookies() -> dict
add_cookie(key: str, value: str)
get_cookie(key: str) -> str
remove_cookie(key: str)
append_cookies(new_data: dict)
clear_cookies()
```

---

### 🔒 CSRF token management
```python
set_csrf(mode: str = "input", field: str = "csrf_token")
extract_csrf_token(html: str) -> str | None
```

---

### 📡 HTTP requests
```python
get(path="", params=None, port=None)
post(path="", json=None, data=None, port=None)
put(path="", json=None, data=None, port=None)
delete(path="", json=None, data=None, port=None)
patch(path="", json=None, data=None, port=None)
head(path="", port=None)
```
Each method returns a `HttpCraftExchange`.

---

### 🧾 File operations
```python
save_config_to_file(filepath)
load_config_from_file(filepath)
save_payload_to_file(filepath)
load_payload_from_file(filepath)
save_headers_to_file(filepath)
load_headers_from_file(filepath)
save_cookies_to_file(filepath)
load_cookies_from_file(filepath)
save_history_to_file(filepath)
```

---

### 🐛 Debugging & History
```python
debug_exchange(exchange, limit_body=True)
print_history()
```

---

## 🧪 Running Tests

```bash
python3 runtests.py                # silent
python3 runtests.py --verbose      # detailed
HTTPCRAFT_VERBOSE=true python3 runtests.py  # alternative
```

---

## 📁 Project Structure

```
httpcraft/
├── http_craft.py
├── tests/
│   ├── test_httpcraft.py
│   ├── mock_server.py
│   └── __init__.py
├── requirements-dev.txt
├── setup.py
└── runtests.py
```

---

## 🛠 Maintainer

Developed by [subnetMusk](https://github.com/subnetMusk)

---

## 📜 License

MIT License
